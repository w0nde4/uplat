using System.Collections;
using UnityEngine;

[RequireComponent(typeof(DamageHandler))]
public class InvulnerabilityOnHit : MonoBehaviour, IDamageInterceptor
{
    [SerializeField] private float duration = 0.5f;
    
    private bool isInvulnerable = false;
    private Coroutine activeCoroutine;

    private DamageHandler damageHandler;

    private void Awake()
    {
        damageHandler = GetComponent<DamageHandler>();
    }

    private void OnEnable()
    {
        damageHandler.OnDamageRecieved += ActivateInvulnerability;
    }

    private void OnDisable()
    {
        damageHandler.OnDamageRecieved -= ActivateInvulnerability;
    }

    public void ActivateInvulnerability(GameObject gameObject)
    {
        if(activeCoroutine != null)
            StopCoroutine(activeCoroutine);

        activeCoroutine = StartCoroutine(InvulnerabilityCoroutine());
    }

    private IEnumerator InvulnerabilityCoroutine()
    {
        isInvulnerable = true;
        yield return new WaitForSeconds(duration);
        isInvulnerable = false;
    }

    public bool CanApplyDamage(GameObject gameObject)
    {
        return !isInvulnerable;
    }

    public int ModifyDamage(int damage, GameObject damagable) => damage;
}
